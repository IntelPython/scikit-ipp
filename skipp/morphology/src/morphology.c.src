/* -*- c -*- */
#include "morphology.h"

#define EXIT_FUNC exitLine:             /* Label for Exit */
#define check_sts(st) if((st) != ippStsNoErr) goto exitLine

IppStatus
ippiMorphologyBorderGetSize(
    IppDataType datatype,
    IppiSize roiSize,
    IppiSize maskSize,
    int numChannels,
    int * pSpecSize,
    int * pBufferSize)
{
    IppStatus status = ippStsNoErr;


    if (numChannels == 1)
    {
        switch (datatype)
        {
        /**begin repeat
         *
         * #ipp_type = 1u, 8u, 16u, 16s, 32f#
         */
        case ipp@ipp_type@:
        {
            status = ippiMorphologyBorderGetSize_@ipp_type@_C1R(roiSize, maskSize, pSpecSize, pBufferSize);
            break;
        }
        /**end repeat**/
        default:
        {
            status = ippStsDataTypeErr;
        }
        }
    }
    else if (numChannels == 3)
    {
        switch (datatype)
        {
        /**begin repeat
         *
         * #ipp_type = 8u, 32f#
         */
        case ipp@ipp_type@:
        {
            status = ippiMorphologyBorderGetSize_@ipp_type@_C3R(roiSize, maskSize, pSpecSize, pBufferSize);
            break;
        }
        /**end repeat**/
        default:
        {
            status = ippStsDataTypeErr;
        }
        }
    }
    else if (numChannels == 4)
    {
        switch (datatype)
        {
        /**begin repeat
         *
         * #ipp_type = 8u, 32f#
         */
        case ipp@ipp_type@:
        {
            status = ippiMorphologyBorderGetSize_@ipp_type@_C4R(roiSize, maskSize, pSpecSize, pBufferSize);
            break;
        }
        /**end repeat**/
        default:
        {
            status = ippStsDataTypeErr;
        }
        }
    }
    else
    {
        status = ippStsErr;
    }
    check_sts(status);

    EXIT_FUNC
        return status;
}


IppStatus
ippiMorphologyBorderInit(
    IppDataType datatype,
    int numChannels,
    IppiSize roiSize,
    const Ipp8u * pMask,
    IppiSize maskSize,
    IppiMorphState* pSpec,
    Ipp8u* pBuffer)
{
    IppStatus status = ippStsNoErr;
    if (numChannels == 1)
    {
        switch (datatype)
        {
        /**begin repeat
         *
         * #ipp_type = 8u, 16u, 16s, 32f#
         */
        case ipp@ipp_type@:
        {
            status = ippiMorphologyBorderInit_@ipp_type@_C1R(roiSize, pMask, maskSize, pSpec, pBuffer);
            break;
        }
        /**end repeat**/
        default:
        {
            status = ippStsDataTypeErr;
        }
        }
    }
    else if (numChannels == 3)
    {
        switch (datatype)
        {
        /**begin repeat
         *
         * #ipp_type = 8u, 32f#
         */
        case ipp@ipp_type@:
        {
            status = ippiMorphologyBorderInit_@ipp_type@_C3R(roiSize, pMask, maskSize, pSpec, pBuffer);
            break;
        }
        /**end repeat**/
        default:
        {
            status = ippStsDataTypeErr;
        }
        }
    }
    else if (numChannels == 4)
    {
        switch (datatype)
        {
        /**begin repeat
         *
         * #ipp_type = 8u, 32f#
         */
        case ipp@ipp_type@:
        {
            status = ippiMorphologyBorderInit_@ipp_type@_C4R(roiSize, pMask, maskSize, pSpec, pBuffer);
            break;
        }
        /**end repeat**/
        default:
        {
            status = ippStsDataTypeErr;
        }
        }
    }
    else
    {
        status = ippStsErr;
    }
    check_sts(status);
    EXIT_FUNC
        return status;
}

/**begin repeat
 *
 * #ippi_morphology_func = Erode, Dilate#
 */
IppStatus
ippi@ippi_morphology_func@Border(
    IppDataType datatype,
    int numChannels,
    void * pSrc,
    int srcStep,
    void * pDst,
    int dstStep,
    IppiSize roiSize,
    IppiBorderType ippBorderType,
    float ippBorderValue,
    const IppiMorphState * pSpec,
    Ipp8u* pBuffer
    )
{
    IppStatus status = ippStsNoErr;

    if (numChannels == 1)
    {
        switch (datatype)
        {
        /**begin repeat1
         *
         * #ipp_type = 8u, 16u, 16s, 32f#
         */
        case ipp@ipp_type@:
        {
            Ipp@ipp_type@ ippbordervalue = (Ipp@ipp_type@)ippBorderValue;
            status = ippi@ippi_morphology_func@Border_@ipp_type@_C1R(pSrc, srcStep, pDst, dstStep, roiSize, ippBorderType,
                ippbordervalue, pSpec, pBuffer);
            break;
        }
        /**end repeat1**/
        default:
        {
            status = ippStsDataTypeErr;
        }
        }
    }
    else if (numChannels == 3)
    {
        switch (datatype)
        {
        /**begin repeat1
         *
         * #ipp_type = 8u, 32f#
         */
        case ipp@ipp_type@:
        {
            Ipp@ipp_type@ ippbordervalue[3] = { (Ipp@ipp_type@)ippBorderValue,
                                                (Ipp@ipp_type@)ippBorderValue,
                                                (Ipp@ipp_type@)ippBorderValue };
            status = ippi@ippi_morphology_func@Border_@ipp_type@_C3R(pSrc, srcStep, pDst, dstStep, roiSize, ippBorderType,
                ippbordervalue, pSpec, pBuffer);
            break;
        }
        /**end repeat1**/
        default:
        {
            status = ippStsDataTypeErr;
        }
        }
    }
    else if (numChannels == 4)
    {
        switch (datatype)
        {
        /**begin repeat1
         *
         * #ipp_type = 8u, 32f#
         */
        case ipp@ipp_type@:
        {
            Ipp@ipp_type@ ippbordervalue[4] = { (Ipp@ipp_type@)ippBorderValue,
                                                (Ipp@ipp_type@)ippBorderValue,
                                                (Ipp@ipp_type@)ippBorderValue,
                                                (Ipp@ipp_type@)ippBorderValue };
            status = ippi@ippi_morphology_func@Border_@ipp_type@_C4R(pSrc, srcStep, pDst, dstStep, roiSize, ippBorderType,
                ippbordervalue, pSpec, pBuffer);
            break;
        }
        /**end repeat1**/
        default:
        {
            status = ippStsDataTypeErr;
        }
        }
    }
    else
    {
        status = ippStsErr;
    }
    return status;
}
/**end repeat**/

IppStatus
ippiMorphology(
    IppDataType datatype,
    ippiMorphologyFunction ippiFunc,
    void * pSrc,
    void * pDst,
    int img_width,
    int img_height,
    int numChannels,
    void * pMask,
    int mask_width,
    int mask_height,
    IppiBorderType ippBorderType,
    float ippBorderValue)
{
    IppStatus status = ippStsNoErr;

    IppiMorphState* pSpec = NULL;
    Ipp8u* pBuffer = NULL;
    IppiSize roiSize = { img_width, img_height };
    IppiSize maskSize = { mask_width, mask_height };

    int sizeof_src;
    status = get_sizeof(datatype, &sizeof_src);
    check_sts(status);

    int srcStep = numChannels * img_width * sizeof_src;
    int dstStep = srcStep;

    int specSize = 0;
    int bufferSize = 0;

    status = ippiMorphologyBorderGetSize(datatype, roiSize, maskSize, numChannels, &specSize, &bufferSize);
    check_sts(status);
    pSpec = (IppiMorphState*)ippsMalloc_8u(specSize);
    if (pSpec == NULL)
    {
        status = ippStsMemAllocErr;
        check_sts(status);
    }
    pBuffer = (Ipp8u*)ippsMalloc_8u(bufferSize);
    if (pBuffer == NULL)
    {
        status = ippStsMemAllocErr;
        check_sts(status);
    }

    status = ippiMorphologyBorderInit(datatype, numChannels, roiSize, pMask, maskSize, pSpec, pBuffer);
    check_sts(status);

    if (ippiFunc == IppiErodeBorder) {
        status = ippiErodeBorder(datatype, numChannels, pSrc, srcStep, pDst, dstStep, roiSize, ippBorderType,
            ippBorderValue, pSpec, pBuffer);
    }
    else if (ippiFunc == IppiDilateBorder) {
        status = ippiDilateBorder(datatype, numChannels, pSrc, srcStep, pDst, dstStep, roiSize, ippBorderType,
            ippBorderValue, pSpec, pBuffer);
    }
    else
    {
        status = ippStsErr;
    }
    check_sts(status);
EXIT_FUNC
    ippsFree(pBuffer);
    ippsFree(pSpec);
    return status;
}
